package sharedPayments.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.rowset.CachedRowSet;

import org.junit.jupiter.api.Test;

import jakarta.inject.Inject;
import sharedPayments.model.User;
import sharedPayments.repository.UserRepository;

public class UserRepositoryIT extends GenericIT {
	
	@Inject
	private UserRepository userRepository;
	
	@Override
	protected long getInitialID() {
		return 100L;
	}
	
	private void saveDatabaseUsers(User...users) {
		for (User u : users) this.userRepository.save(u);
	}
	
	private List<User> getAllUsersFromDatabase() throws SQLException {
		var dbUsers = new ArrayList<User>();
		var userRows = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		userRows.beforeFirst();
		while (userRows.next()) {
			User u = new User(userRows.getString("name"));
			u.setDebt(userRows.getDouble("debt"));
			u.setId(userRows.getLong("id"));
			dbUsers.add(u);
		}
		return dbUsers;
	}
	
	@Test
	void givenOneNewUser_WhenSaved_ThenUsersTableContainsThatUser() throws SQLException {
		User user = new User("Fuencisla");
		user = this.userRepository.save(user);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertTrue(users.absolute(6));
		assertThat(user.getId(), is(100L));
		assertThat(users.getLong("id"), is(user.getId()));
		assertThat(users.getString("name"), is(user.getName()));
	}
	
	@Test
	void givenOneNewUser_WhenSaved_ThenUsersTableContainsAll() throws SQLException {
		User user1 = new User("NewUser");
		this.saveDatabaseUsers(user1);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertTrue(users.absolute(5));
		assertThat(users.getLong("id"), is(5L));
		assertThat(users.getString("name"), is("Rebeca"));
		assertThat(users.next(), is(true));
		assertThat(users.getLong("id"), is(user1.getId()));
		assertThat(users.getString("name"), is(user1.getName()));
	}
	
	@Test
	void givenSeveralNewUsers_WhenSaved_ThenAutoGeneratedIdIncreasesAccordingly() throws SQLException {
		this.saveDatabaseUsers(
				new User("User100"),
				new User("User101"),
				new User("User102"),
				new User("User103"));
		
		User userWithId104 = new User("User104");
		this.userRepository.save(userWithId104);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);

		assertTrue(users.absolute(6));
		assertThat(users.getLong("id"), is(100L));
		assertTrue(users.absolute(10));
		assertThat(users.getLong("id"), is(104L));
		
	}
	
	@Test
	void givenNoNewUsers_WhenFindAll_ThenListIsEmpty() throws SQLException {
		assertEquals(this.getAllUsersFromDatabase(), this.userRepository.findAll());
	}
	
	@Test
	void givenSeveralNewUsers_WhenFindAll_ThenListContainsAllUsers() throws SQLException {
		User[] dbUsers = {
				new User("George"),
				new User("Martha"),
				new User("Bilbo")};
		this.saveDatabaseUsers(dbUsers);
		
		assertEquals(this.getAllUsersFromDatabase(), this.userRepository.findAll());
	}
	
	@Test
	void givenOneNewUser_WhenUpdateUserName_ThenDatabaseHasUpdatedData() throws SQLException {
		String newName = "NewName";
		this.saveDatabaseUsers(new User("OldName"));
		
		User user = this.userRepository.findById(100L).get();
		user.setName(newName);
		user = this.userRepository.update(user);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertTrue(users.absolute(6));
		assertThat(users.getLong("id"), is(100L));
		assertThat(users.getString("name"), is(newName));
	}

}
