package sharedPayments.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.rowset.CachedRowSet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.micronaut.context.annotation.Value;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import jakarta.inject.Inject;
import sharedPayments.model.User;

@MicronautTest
public class UserRepositoryIT {
	
	@Value("${datasources.default.username}")
	private String username;
	@Value("${datasources.default.password}")
	private String password;
	@Value("${datasources.default.url}")
	private String url;
	
	private Map<String, String> dbConfig = new HashMap<String, String>();
	
	@Inject
	private RepositoryHandler repoHandler; 

	@BeforeEach
	void resetDB() {
		if (this.dbConfig.isEmpty()) this.setUpDatabaseConfig();
		QueryEnum.EMPTY_DATABASE.execute(dbConfig);
		QueryEnum.RESET_HIBERNATE_AUTO_ID.execute(dbConfig);
		QueryEnum.CREATE_USER_TABLE.execute(dbConfig);
		QueryEnum.CREATE_PAYMENT_TABLE.execute(dbConfig);
	}
	
	private void setUpDatabaseConfig() {
		this.dbConfig.put("url", url);
		this.dbConfig.put("username", username);
		this.dbConfig.put("password", password);
	}
	
	private void saveDatabaseUsers(User... users) {
		for (User user : users) 
			this.repoHandler.save(user);
	}
	
	@Test
	void givenNoUsers_WhenSaveNewUser_ThenUsersTableContainsThatUser() throws SQLException {
		User user = new User("Fuencisla");
		user = this.repoHandler.save(user);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertThat(user.getId(), is(1L));
		assertThat(users.getString("id"), is(user.getId().toString()));
		assertThat(users.getString("name"), is(user.getName()));
	}
	
	@Test
	void givenOneUser_WhenSaveNewUser_ThenUsersTableContainsBoth() throws SQLException {
		User user1 = new User("Juana");
		this.saveDatabaseUsers(user1);
		
		User user = new User("NewUser");
		user = this.repoHandler.save(user);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertThat(users.getString("name"), is(user1.getName()));
		assertThat(users.next(), is(true));
		assertThat(users.getString("name"), is(user.getName()));
		assertThat(users.getString("id"), is("2"));
	}
	
	@Test
	void givenNoUsers_WhenSaveSeveralUsers_ThenAutoGeneratedIdIncreasesAccordingly() throws SQLException {
		User[] dbUsers = {
				new User("User1"),
				new User("User2"),
				new User("User3"),
				new User("User4")};
		this.saveDatabaseUsers(dbUsers);
		User userWithId5 = new User("User5");
		
		this.repoHandler.save(userWithId5);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertThat(users.getString("id"), is("1"));
		for (int i=0; i<4; i++)
			assertTrue(users.next());
		assertThat(users.getString("id"), is("5"));
		
	}
	
	@Test
	void givenNoUsers_WhenFindAll_ThenListIsEmpty() {
		assertThat(this.repoHandler.findAllUsers().size(), is(0));
	}
	
	@Test
	void givenSeveralUsers_WhenFindAll_ThenListContainsAllUsers() {
		User[] dbUsers = {
				new User("George"),
				new User("Martha"),
				new User("Bilbo")};
		this.saveDatabaseUsers(dbUsers);
		List<User> users = this.repoHandler.findAllUsers();
		
		assertThat(users.get(0).getName(), is(dbUsers[0].getName()));
		assertThat(users.get(1).getName(), is(dbUsers[1].getName()));
		assertThat(users.get(2).getName(), is(dbUsers[2].getName()));
	}
	
	@Test
	void givenOneUser_WhenUpdateUserName_ThenDatabaseHasNewData() throws SQLException {
		String newName = "NewName";
		User user = new User("OldName");
		this.repoHandler.save(user);
		
		user = this.repoHandler.findUserById(1L).get();
		user.setName(newName);
		user = this.repoHandler.update(user);
		CachedRowSet users = QueryEnum.SELECT_ALL_USERS.execute(dbConfig);
		
		assertThat(users.getString("id"), is("1"));
		assertThat(users.getString("name"), is(newName));
	}

}
